# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ShpAttributeManagerDialog
                                 A QGIS plugin
 QGIS Plugin for managing the attribute table data of a shapfile
                             -------------------
        begin                : 2014-12-28
        git sha              : $Format:%H$
        copyright            : (C) 2014 by Max Hartl
        email                : m@xhartl.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import qgis.utils
import os
from PyQt4 import QtGui, QtCore, uic
from add_new_value_dialog import AddNewValueDialog

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'shp_attribute_manager_dialog_base.ui'))

canvas = qgis.utils.iface.mapCanvas()
layer_list = []
attribute_list = []
unique_values = []
new_unique_values = []

values_delete = []

currShpIdx = 0
currColIdx = 0


class ShpAttributeManagerDialog(QtGui.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(ShpAttributeManagerDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        self.addNewValueDialog = AddNewValueDialog()
        
        self.outFileName = None
        self.selectedLayerName = None
        
        self.btnCancel.clicked.connect(self.close)
        self.btnCancel.clicked.connect(self.addNewValueDialog.close)
        #self.btnUpdate.clicked.connect(self.getLayers)
        self.mMapLayerComboBox.activated.connect(self.getAttributes)
        self.cbxSelCol.activated.connect(self.getUniqueValues)
        self.tblAttrCurr.cellClicked.connect(self.handleCellClicked)
        self.btnExecute.clicked.connect(self.btnExecuteClicked)
        self.btnSelectFileLocation.clicked.connect(self.showSaveDialog)
        
        self.btnExecute.setDisabled(True)
    
    def printBla(self):
        print "click"
        print self.mMapLayerComboBox.currentIndex()
    
    
    def getLayers(self):
        self.mMapLayerComboBox.clear()        
        del layer_list[:]
        allLayers = canvas.layers()
        
        print "+++++++++++"
        
        layer_list.append("--- select layer ---")
        for layer in allLayers:            
            layer_list.append(layer.name())
            print layer.name()
    
        print str(len(layer_list) -1) + " layers available"        
        print "+++++++++++"
    
        self.mMapLayerComboBox.addItems(layer_list)
        self.cbxSelCol.clear()
        
    def getAttributes(self):
        
        currShpIdx = self.mMapLayerComboBox.currentIndex();

        print currShpIdx
        layer = self.mMapLayerComboBox.currentLayer()
        self.selectedLayerName = layer.name()
        attribute_list = layer.pendingAllAttributesList()
        
        new_attribute_list = []        
        
        new_attribute_list.append("--- select column ---")
        for i in range(0, len(attribute_list)):
            print layer.attributeDisplayName(i)
            new_attribute_list.append(layer.attributeDisplayName(i))
            
        self.cbxSelCol.clear()
        self.cbxSelCol.addItems(new_attribute_list)
        
    def getUniqueValues(self):
        
        currColIdx = self.cbxSelCol.currentIndex();                
        column = currColIdx
        
        if self.cbxSelCol.currentIndex() == 0:
            print "Gnah..."
            self.txtOutput.append("No column selected")
        else:       
            layer = canvas.layer(currShpIdx)
            unique_values = layer.dataProvider().uniqueValues(column)
            unique_value_count = len(unique_values)
            
            self.tblAttrCurr.setRowCount(unique_value_count)
            self.tblAttrCurr.setColumnCount(3)
            
            self.tblAttrCurr.setColumnWidth(0,  64)
            self.tblAttrCurr.setColumnWidth(1,  220)
            self.tblAttrCurr.setColumnWidth(2,  220)
            
            self.tblAttrCurr.setHorizontalHeaderItem(0, QtGui.QTableWidgetItem('Delete?'))
            self.tblAttrCurr.setHorizontalHeaderItem(1, QtGui.QTableWidgetItem('Unique Attribute values'))
            self.tblAttrCurr.setHorizontalHeaderItem(2, QtGui.QTableWidgetItem('NEW Attribute values'))
        
            # filling table with unique values
            for i, unique_value in enumerate(unique_values):
                
                checkbox_item = QtGui.QTableWidgetItem()
                
                try:
                    item_unique = QtGui.QTableWidgetItem(unique_value)
                except TypeError:
                    self.txtOutput.append("Null type in attribute column...")
                    item_unique = QtGui.QTableWidgetItem("NULL")
                    
                item_unique_new = QtGui.QTableWidgetItem("")
                
                # make first column checkable
                checkbox_item.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                checkbox_item.setCheckState(QtCore.Qt.Unchecked)    
                
                # disable cell editing
                item_unique.setFlags(QtCore.Qt.ItemIsEnabled)
                item_unique_new.setFlags(QtCore.Qt.ItemIsEnabled)

                self.tblAttrCurr.setItem(i, 0, checkbox_item)
                self.tblAttrCurr.setItem(i, 1, item_unique)
                self.tblAttrCurr.setItem(i, 2, item_unique_new)                
                
    def handleCellClicked(self, row, column):
        print "click"
        item = self.tblAttrCurr.item(row, column)
        if item.column() == 0:
            if item.checkState() == QtCore.Qt.Checked:
                print str(row) + "," + str(column) + " checked"
            else:
                print str(row) + "," + str(column) + " unchecked"
        elif item.column() == 2:
            self.addNewValue(row, column)

    def btnExecuteClicked(self):
        print "processing"
        
    def addNewValue(self, row, column):
        print "editing cell " + str(row) + "," + str(column)
        self.addNewValueDialog.show()
        self.addNewValueDialog.updateDialog(self.tblAttrCurr)
        self.addNewValueDialog.setCurrCell(row, column)
        
    def showSaveDialog(self):
        outFileName = str(QtGui.QFileDialog.getSaveFileName(self, "Select output directory:", self.selectedLayerName + "_edit.shp", "*.shp"))
        print outFileName
        if self.txtFileLocation != None:
            self.btnExecute.setDisabled(False)
        self.txtFileLocation.clear()
        self.txtFileLocation.setText(outFileName)
